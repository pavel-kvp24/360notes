SQL (PostgreSQL, H2)


1. Как в PostgreSQL создать индекс, не блокирующий записи в таблицу? (Средняя)
2. Что такое CTE и как его можно использовать в PostgreSQL? (Средняя)
3. Какие есть специфичные для H2 функции SQL, и в каких случаях они полезны? (Средняя)
4. Как реализовать репликацию данных между PostgreSQL и H2? (Высокая)
5. Какие типы индексов поддерживаются в PostgreSQL и как выбрать подходящий? (Средняя)


Cassandra


1. Опишите модель данных Cassandra и как она отличается от традиционных RDBMS. (Средняя)
2. Какие стратегии компакции доступны в Cassandra и когда их следует использовать? (Средняя)
3. Как в Cassandra происходит выбор координатора для операций чтения и записи? (Средняя)
4. Как настраивается и используется вторичный индекс в Cassandra? (Высокая)
5. Какие меры предпринимаются в Cassandra для обеспечения высокой доступности и устойчивости к разделению сети? (Высокая)


Slick


1. Как в Slick реализовать поддержку нескольких баз данных? (Средняя)
2. Опишите основные отличия между lifted и plain SQL embedding в Slick. (Средняя)
3. Как в Slick работать с транзакциями? (Средняя)
4. Как Slick обеспечивает типобезопасность? (Высокая)
5. Как в Slick реализовать кастомную логику для кодирования и декодирования сложных типов данных? (Высокая)


Hibernate


1. Как в Hibernate реализовать оптимистичную блокировку? (Средняя)
2. В чем разница между get и load методами в Hibernate? (Низкая)
3. Какие есть способы управления кэшем второго уровня в Hibernate? (Средняя)
4. Какие стратегии наследования поддерживаются Hibernate и как их применять? (Средняя)
5. Как Hibernate обрабатывает lazy и eager загрузку связей? (Средняя)


Spring Data


1. Какие преимущества предоставляет Spring Data для работы с базами данных? (Низкая)
2. Как в Spring Data реализовать кастомный репозиторий? (Средняя)
3. Как Spring Data поддерживает различные стратегии транзакций? (Средняя)
4. Как организовать пейджинацию и сортировку результатов запросов в Spring Data? (Низкая)
5. Как Spring Data JPA интегрируется с QueryDSL для типобезопасных запросов? (Высокая)


Others (Elasticsearch, MongoDB)


1. Как Elasticsearch обеспечивает высокоскоростной поиск по большим объемам данных? (Средняя)
2. Какие есть стратегии индексации в MongoDB для ускорения запросов? (Средняя)
3. Как реализовать full-text search в Elasticsearch? (Средняя)
4. Как в MongoDB реализовать агрегацию данных? (Средняя)
5. Какие типы узлов используются в кластере Elasticsearch и каковы их роли? (Высокая)


Java Core (OOP, JVM)


1. Как JVM управляет памятью и какие существуют области памяти? (Средняя)
2. В чем заключаются принципы ООП и как они реализуются в Java? (Низкая)
3. Какие механизмы синхронизации доступны в Java и как они работают? (Средняя)
4. Какие основные задачи выполняют Garbage Collectors в JVM? (Средняя)
5. Какие новые особенности синтаксиса были добавлены в Java 17? (Высокая)


Java Collections


1. Какая разница между List, Set и Map в Java Collections Framework? (Низкая)
2. Каковы преимущества и недостатки использования LinkedList по сравнению с ArrayList? (Средняя)
3. Как реализованы HashMap и TreeMap и когда лучше использовать каждую из них? (Средняя)
4. Какие коллекции в Java являются потокобезопасными? (Средняя)
5. Как реализовать свою коллекцию в Java и какие интерфейсы необходимо реализовать? (Высокая)


Java Advanced (Java 8, Concurrency, Java memory model, Garbage collectors, New java syntax (17+))


1. Каковы основные особенности Java 8, такие как лямбда-выражения и Stream API? (Низкая)
2. Какие изменения были внесены в модель памяти Java в последних версиях? (Средняя)
3. Какие существуют гарбэдж-коллекторы в JVM и как выбрать подходящий? (Средняя)
4. Какие стратегии существуют для управления параллелизмом в Java? (Средняя)
5. Какие новые возможности появились в синтаксисе Java начиная с версии 17? (Высокая)


Scala Core (Control Structures, Case Classes, Traits, Pattern Matching, Tuples)


1. Как в Scala используются кейс-классы и для чего они нужны? (Низкая)
2. Что такое трейты в Scala и как они отличаются от классов? (Средняя)
3. Как реализовано сопоставление с образцом (pattern matching) и какие его преимущества? (Средняя)
4. Какие структуры управления доступны в Scala и как они сравниваются с Java? (Низкая)
5. Какие особенности и преимущества предоставляют кортежи (tuples) в Scala? (Средняя)


Scala Collections


1. Какие типы коллекций существуют в Scala и какие у них особенности? (Низкая)
2. В чем различие между мутабельными и иммутабельными коллекциями в Scala? (Средняя)
3. Как реализованы коллекции Vector и List в Scala и когда их следует использовать? (Средняя)
4. Как в Scala преобразовать одну коллекцию в другую? (Низкая)
5. Какие есть операции высшего порядка для работы с коллекциями в Scala? (Средняя)


Scala Advanced (Implicits, Variances, Concurrency, Functional Programming)


1. Что такое неявные (implicits) в Scala и как они используются? (Высокая)
2. В чем заключается концепция вариантности (variances) и как она применяется в Scala? (Средняя)
3. Какие подходы к реализации параллелизма существуют в Scala? (Средняя)
4. Какие принципы функционального программирования поддерживает Scala? (Средняя)
5. Как в Scala реализовать асинхронное выполнение и обработку Future? (Средняя)


Kanban


1. Какие основные принципы лежат в основе Kanban? (Низкая)
2. Как используются WIP лимиты (Work In Progress) в Kanban? (Средняя)
3. Какие метрики и индикаторы используются для отслеживания производительности в Kanban? (Средняя)
4. Как Kanban подход может быть интегрирован в существующие процессы разработки? (Средняя)
5. Какие инструменты и технологии обычно используются для реализации Kanban в IT-компаниях? (Низкая)
Scrum


1. Каковы роли членов команды в Scrum? (Низкая)
2. Какие артефакты используются в Scrum для отслеживания прогресса проекта? (Низкая)
3. Как функционирует Scrum-событие "Sprint Review"? (Средняя)
4. В чем различие между Scrum и Kanban? (Средняя)
5. Как вы управляете изменениями в требованиях во время спринта? (Высокая)


Feedback


1. Какие основные типы обратной связи (feedback) существуют? (Низкая)
2. Как структурировать эффективную сессию обратной связи? (Средняя)
3. Как применять обратную связь для непрерывного улучшения процесса разработки? (Средняя)
4. Какие трудности могут возникнуть при получении обратной связи от команды, и как их преодолеть? (Средняя)
5. Какие инструменты могут помочь в сборе и анализе обратной связи? (Средняя)


SDLC (Software Development Life Cycle)


1. Какие основные фазы входят в жизненный цикл разработки программного обеспечения (SDLC)? (Низкая)
2. В чем основное отличие между водопадной и агил-методологией в SDLC? (Средняя)
3. Какие факторы следует учитывать при выборе методологии SDLC для проекта? (Средняя)
4. Какие инструменты и системы обычно используются на разных этапах SDLC? (Средняя)
5. Как управлять рисками на различных этапах SDLC? (Высокая)


STLC (Software Testing Life Cycle)


1. Каковы этапы жизненного цикла тестирования программного обеспечения (STLC)? (Низкая)
2. Как в STLC определяются критерии завершения тестирования? (Средняя)
3. Какие виды тестирования обычно выполняются на разных этапах STLC? (Средняя)
4. Какие лучшие практики существуют для написания тестовых сценариев? (Средняя)
5. Как интегрировать автоматизированное тестирование в STLC? (Высокая)


Docker


1. Что такое контейнеризация и как Docker реализует этот принцип? (Низкая)
2. Какие основные команды Docker используются для работы с образами и контейнерами? (Низкая)
3. В чем разница между Docker образом (image) и контейнером? (Средняя)
4. Как можно оптимизировать размер Docker образа? (Средняя)
5. Как Docker обеспечивает изоляцию и безопасность контейнеров? (Высокая)


Kubernetes


1. Каковы основные концепции и компоненты Kubernetes? (Низкая)
2. Как реализовать масштабируемость приложений с помощью Kubernetes? (Средняя)
3. Что такое Kubernetes Pod и как он используется? (Средняя)
4. Как настроить сетевую политику в Kubernetes? (Высокая)
5. Как Kubernetes управляет хранением данных (Persistent Storage)? (Высокая)


Kubectl


1. Какие команды kubectl используются для получения информации о состоянии кластера Kubernetes? (Низкая)
2. Какие действия можно выполнить с помощью kubectl для управления ресурсами Kubernetes? (Низкая)
3. Как просмотреть и отследить логи контейнеров в Kubernetes с помощью kubectl? (Средняя)
4. Как с помощью kubectl применить изменения в конфигурации Kubernetes без перезапуска подов? (Средняя)
5. Какие есть способы управления доступом в Kubernetes с помощью kubectl? (Высокая)


GitLab CI/CD


1. Каковы основные компоненты GitLab CI/CD? (Низкая)
2. Как автоматизировать процесс тестирования и развертывания с помощью GitLab CI/CD? (Средняя)
3. Как настроить GitLab Runner для выполнения CI/CD пайплайнов? (Средняя)
4. Как управлять секретами и переменными окружения в GitLab CI/CD? (Средняя)
5. Как реализовать стратегии развертывания, такие как canary или blue-green, с помощью GitLab CI/CD? (Высокая)


ELK Stack


1. Какие компоненты входят в ELK Stack и какова их роль? (Низкая)
2. Какие типы данных можно анализировать с помощью ELK Stack? (Средняя)
3. Как настроить индексы в Elasticsearch для улучшения производительности поиска? (Средняя)
4. Как в Kibana создать визуализации и дашборды? (Средняя)
5. Как Logstash обрабатывает и трансформирует данные перед их индексацией в Elasticsearch? (Высокая)


Prometheus


1. Как Prometheus собирает метрики? (Низкая)
2. Какие возможности предоставляет язык запросов PromQL? (Средняя)
3. Как настроить алерты в Prometheus для мониторинга системы? (Средняя)
4. Как Prometheus хранит временные ряды данных? (Средняя)
5. Как интегрировать Prometheus с другими системами мониторинга или алертинга? (Высокая)


Grafana


1. Как подключить источник данных к Grafana? (Низкая)
2. Как создать интерактивные панели мониторинга в Grafana? (Средняя)
3. Как настроить аутентификацию и разграничение доступа в Grafana? (Средняя)
4. Как в Grafana использовать шаблоны и переменные для создания масштабируемых дашбордов? (Средняя)
5. Какие лучшие практики существуют для оптимизации производительности дашбордов Grafana? (Высокая)


Jaeger


1. Как Jaeger собирает данные о трассировке? (Низкая)
2. Какие преимущества предоставляет распределенная трассировка с Jaeger? (Средняя)
3. Как настроить семплирование трассировок в Jaeger для уменьшения нагрузки? (Средняя)
4. Как интегрировать Jaeger с микросервисной архитектурой? (Средняя)
5. Какие стратегии семплирования доступны в Jaeger и как они влияют на производительность? (Высокая)


Tracing (OpenTelemetry, Kamon)


1. Какие основные компоненты и функции предоставляет OpenTelemetry? (Низкая)
2. Как Kamon интегрируется с приложениями на Scala и Akka? (Средняя)
3. Как настроить экспорт трассировки в внешние системы, такие как Jaeger или Zipkin, с помощью OpenTelemetry? (Средняя)
4. Как управлять производительностью и нагрузкой при сборе данных трассировки? (Средняя)
5. Какие лучшие практики существуют для инструментирования кода для трассировки? (Высокая)


Terraform


1. Какие основные команды Terraform используются для управления инфраструктурой? (Низкая)
2. Как Terraform обеспечивает идемпотентность своих операций? (Средняя)
3. Как определить и использовать модули в Terraform? (Средняя)
4. Как настроить взаимозависимости ресурсов в Terraform? (Высокая)
5. Как управлять состоянием инфраструктуры с помощью Terraform? (Высокая)


Design Principles (SOLID, DRY, KISS, YAGNI, BDUF, APO)


1. Как принцип DRY влияет на поддержку и эволюцию программного кода? (Низкая)
2. В чем заключается принцип KISS и как он применяется при проектировании систем? (Средняя)
3. Можете ли вы объяснить каждую букву в аббревиатуре SOLID? (Средняя)
4. Что значит YAGNI и как это помогает в процессе разработки? (Средняя)
5. Как избежать проблемы BDUF (Big Design Up Front) при планировании больших систем? (Высокая)
Design Patterns (GoF, Concurrency, Architectural)


1. Какие шаблоны проектирования GoF подходят для создания расширяемых систем? (Средняя)
2. Какой шаблон проектирования позволяет избежать блокировок при конкурентном доступе к ресурсам? (Средняя)
3. В чём заключается паттерн "Адаптер" и когда его следует использовать? (Низкая)
4. Какие архитектурные паттерны используются для микросервисных архитектур? (Средняя)
5. Как паттерн "Наблюдатель" применяется в многопоточной среде? (Высокая)


Algorithms


1. Как работает алгоритм сортировки слиянием и в каких случаях он наиболее эффективен? (Средняя)
2. В чем разница между алгоритмами поиска в глубину и поиска в ширину? (Средняя)
3. Каким образом алгоритмы сжатия данных уменьшают размер файла без потери информации? (Высокая)
4. Как реализовать алгоритм поиска кратчайшего пути в графе? (Высокая)
5. Какие существуют алгоритмы для решения задачи о рюкзаке? (Высокая)


Clean Code & Refactoring


1. Что такое "запахи кода" и как они влияют на процесс рефакторинга? (Средняя)
2. Как применять принципы SOLID в практике рефакторинга? (Средняя)
3. В чем разница между рефакторингом и оптимизацией кода? (Низкая)
4. Какие инструменты помогают в автоматизации процесса рефакторинга? (Средняя)
5. Какие паттерны проектирования полезны при рефакторинге больших классов? (Высокая)


Unit & Integration Testing


1. Каковы преимущества использования mock-объектов при модульном тестировании? (Средняя)
2. В чем различие между фреймворками для модульного тестирования JUnit и TestNG? (Средняя)
3. Какие стратегии следует использовать для интеграционного тестирования микросервисов? (Высокая)
4. Как тестировать код, который взаимодействует с базой данных? (Средняя)
5. Какие метрики покрытия кода тестами считаются приемлемыми? (Низкая)


Git


1. Как отменить локальные изменения в Git? (Низкая)
2. В чем преимущества использования rebase перед merge? (Средняя)
3. Как Git обеспечивает целостность данных? (Средняя)
4. Как работает система ветвления в Git? (Средняя)
5. Как изолировать часть кода в отдельную ветку для экспериментов? (Низкая)


Java multithreading


1. Какие основные проблемы многопоточности существуют в Java? (Средняя)
2. Какие механизмы синхронизации предоставляет Java для работы с потоками? (Средняя)
3. Какие изменения в модели многопоточности были внедрены в Java 8? (Высокая)
4. Как и когда использовать volatile переменные? (Средняя)
5. В чем разница между методами wait и sleep? (Низкая)


Cryptography


1. В чем разница между симметричным и асимметричным шифрованием? (Низкая)
2. Что такое хеш-функция и как она используется в криптографии? (Средняя)
3. Как работает цифровая подпись? (Средняя)
4. Что такое PKI (Public Key Infrastructure) и как она работает? (Высокая)
5. Какие алгоритмы шифрования считаются устаревшими и почему? (Средняя)


Unix Systems & Bash


1. Какие команды используются для управления процессами в Unix? (Низкая)
2. Как перенаправить вывод одной команды в другую в Bash? (Низкая)
3. Какие основные типы файлов существуют в Unix-системах? (Средняя)
4. Как создать и использовать переменные окружения в Bash? (Средняя)
5. Как найти файлы, удовлетворяющие определенным критериям, с помощью команды find? (Средняя)


Troubleshooting (Debugging, Profiling)


1. Какие инструменты доступны в Java для профилирования приложений? (Средняя)
2. Какие шаги следует предпринять для отладки утечек памяти? (Высокая)
3. Как использовать отладчик в интегрированной среде разработки (IDE)? (Низкая)
4. Какие методы профилирования производительности существуют? (Средняя)
5. Как диагностировать проблемы с производительностью в распределенных системах? (Высокая)


Performance tuning


1. Какие методы оптимизации SQL-запросов существуют для баз данных? (Средняя)
2. Какие инструменты используются для мониторинга производительности веб-серверов? (Средняя)
3. Как оптимизировать производительность Java-приложений? (Высокая)
4. Как использовать кэширование для улучшения производительности приложения? (Средняя)
5. Какие метрики следует отслеживать при тестировании производительности? (Низкая)


Networking


1. Какие модели сетевого взаимодействия существуют? (Средняя)
2. Какие протоколы используются для обеспечения безопасности передачи данных? (Средняя)
3. Какие инструменты используются для диагностики сетевых проблем? (Средняя)
4. Как настроить маршрутизацию в сети с использованием Linux? (Высокая)
5. Как работает DNS и какие проблемы могут быть связаны с его работой? (Средняя)


Security


1. Какие лучшие практики существуют для обеспечения безопасности веб-приложений? (Средняя)
2. Что такое XSS и как от него защититься? (Средняя)
3. Какие методы аутентификации и авторизации обеспечивают безопасность API? (Высокая)
4. Как защитить данные пользователя при передаче через интернет? (Средняя)
5. Что такое принцип наименьших привилегий и как он применяется в ИТ-безопасности? (Низкая)


Webservises (REST, SOAP)


1. В чем принципиальные отличия между SOAP и REST? (Средняя)
2. Какие статус-коды HTTP используются для обозначения различных типов ответов сервера? (Низкая)
3. Какие шаблоны URL следует использовать при проектировании RESTful API? (Средняя)
4. Какие механизмы безопасности можно использовать для защиты веб-сервисов? (Средняя)
5. Как в SOAP-сервисах реализуется обработка исключений? (Высокая)


UML (Classes, Sequence, Activity, Use cases)


1. Какие элементы используются для представления классов и объектов в диаграмме классов UML? (Низкая)
2. Как на диаграмме последовательностей UML представляются взаимодействия между объектами? (Средняя)
3. Какие типы диаграмм активностей UML используются для моделирования рабочих процессов? (Средняя)
4. Как диаграммы прецедентов помогают в анализе требований к системе? (Средняя)
5. В чем различие между диаграммами состояний и диаграммами активностей в UML? (Высокая)


Gradle


1. Какие преимущества предоставляет Gradle по сравнению с другими системами сборки? (Средняя)
2. Как определить задачу в Gradle и настроить ее выполнение? (Средняя)
3. Как управлять зависимостями в много-модульных проектах с помощью Gradle? (Высокая)
4. Как Gradle использует Groovy или Kotlin DSL для конфигурирования сборки? (Средняя)
5. Как в Gradle реализуется инкрементная сборка? (Высокая)